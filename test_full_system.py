#!/usr/bin/env python3
"""
Test script for the full Automated EDA system
"""
import sys
import os

sys.path.append(".")

from main import EDAOrchestrator
import json


class MockLLMClient:
    """Mock LLM client for testing without API calls"""

    def complete_with_system_prompt(self, user_message):
        """Return mock responses based on the role"""
        if '"role": "planner"' in user_message:
            return {
                "eda_plan": [
                    {
                        "id": "data_overview",
                        "goal": "Basic data overview and missing values",
                        "plots": ["bar"],
                        "priority": 1,
                        "columns": ["amount", "category"],
                        "notes": "Check data completeness and basic structure",
                    },
                    {
                        "id": "dist_amount",
                        "goal": "Distribution analysis for amount",
                        "plots": ["histogram", "boxplot"],
                        "priority": 2,
                        "columns": ["amount"],
                        "notes": "Check for skewness and outliers",
                    },
                    {
                        "id": "cat_category",
                        "goal": "Categorical analysis for category",
                        "plots": ["bar"],
                        "priority": 3,
                        "columns": ["category"],
                        "notes": "Check value distribution and cardinality",
                    },
                ]
            }
        elif '"role": "coder"' in user_message:
            return {
                "title": "Distribution of Amount",
                "python": """
import matplotlib.pyplot as plt
fig, ax = plt.subplots(figsize=(10, 6))
ax.hist(df["amount"].dropna(), bins=30, alpha=0.7, edgecolor='black')
ax.set_xlabel("Amount")
ax.set_ylabel("Frequency")
ax.set_title("Distribution of Amount")
plt.tight_layout()
plt.savefig("./artifacts/fig_dist_amount_1.png", dpi=300, bbox_inches="tight")
plt.close()

manifest = {
    "id": "dist_amount",
    "charts": [{
        "saved_path": "./artifacts/fig_dist_amount_1.png",
        "chart_type": "histogram",
        "columns_used": ["amount"],
        "n_rows_plotted": len(df["amount"].dropna()),
        "axis": {"x": "amount", "y": "Frequency", "log_x": False, "log_y": False, "x_ticks": 30, "y_ticks": 0},
        "encodings": {"hue": None, "facet": None},
        "params": {"bins": 30, "clip_quantiles": [0.01, 0.99], "rolling_window": None},
        "notes": f"NA dropped: {df['amount'].isnull().sum() / len(df) * 100:.1f}%"
    }]
}
""",
                "expected_outputs": ["./artifacts/fig_dist_amount_1.png"],
                "manifest_schema": {
                    "id": "dist_amount",
                    "charts": [
                        {
                            "saved_path": "./artifacts/fig_dist_amount_1.png",
                            "chart_type": "histogram",
                            "columns_used": ["amount"],
                            "n_rows_plotted": 0,
                            "axis": {
                                "x": "amount",
                                "y": "Frequency",
                                "log_x": False,
                                "log_y": False,
                                "x_ticks": 30,
                                "y_ticks": 0,
                            },
                            "encodings": {"hue": None, "facet": None},
                            "params": {
                                "bins": 30,
                                "clip_quantiles": [0.01, 0.99],
                                "rolling_window": None,
                            },
                            "notes": "Generated by mock LLM",
                        }
                    ],
                },
            }
        elif '"role": "critic"' in user_message:
            return {
                "status": "ok",
                "fix_patch": "",
                "notes": "Code executed successfully with no critical issues",
            }
        elif '"role": "reporter"' in user_message:
            return {
                "markdown": """# EDA Analysis Report

## Data Overview
- **Total Rows**: 100
- **Total Columns**: 8

## Analysis Results
### Distribution of Amount
- Generated histogram showing transaction amounts
- Identified right-skewed distribution
- Suggested log transformation for better visualization

## Next Questions
- What are the strongest correlations between variables?
- Are there any temporal patterns in the data?
- What are the main outliers and their potential causes?
""",
                "next_questions": [
                    "What are the strongest correlations between variables?",
                    "Are there any temporal patterns in the data?",
                    "What are the main outliers and their potential causes?",
                ],
            }
        else:
            return {"error": "Unknown role"}


def test_full_system():
    """Test the full EDA system with mock LLM"""
    print("🧪 Testing Full Automated EDA System")
    print("=" * 50)

    # Create orchestrator with mock LLM
    orchestrator = EDAOrchestrator(api_key="mock_key")

    # Replace LLM client with mock
    orchestrator.llm_client = MockLLMClient()
    orchestrator.planner.llm_client = MockLLMClient()
    orchestrator.coder.llm_client = MockLLMClient()
    orchestrator.critic.llm_client = MockLLMClient()
    orchestrator.reporter.llm_client = MockLLMClient()

    # Run EDA analysis
    result = orchestrator.run_eda("tests/sample.csv", "Test EDA", max_items=3)

    if result["success"]:
        print("\n🎉 Full System Test PASSED!")
        print(f"📊 Generated {len(result['highlights'])} analyses")
        print(f"🖼️  Artifacts: {result['artifacts_dir']}")
        print(f"📝 Report: {result['report_path']}")
        print(f"📋 Log: {result['log_path']}")

        # Check if files were created
        artifacts_exist = (
            os.path.exists(result["artifacts_dir"])
            and len(os.listdir(result["artifacts_dir"])) > 0
        )
        report_exists = os.path.exists(result["report_path"])
        log_exists = os.path.exists(result["log_path"])

        print(f"\n✅ Artifacts created: {artifacts_exist}")
        print(f"✅ Report created: {report_exists}")
        print(f"✅ Log created: {log_exists}")

        if artifacts_exist and report_exists and log_exists:
            print("\n🎯 All acceptance criteria met!")
            return True
        else:
            print("\n❌ Some files missing")
            return False
    else:
        print(f"\n❌ Full System Test FAILED: {result['error']}")
        return False


if __name__ == "__main__":
    success = test_full_system()
    sys.exit(0 if success else 1)
